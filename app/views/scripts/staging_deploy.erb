if [ "${CIRCLECI}" == "" ]; then
  echo 'not in CircleCI env'
  exit 1
fi

if [ "${HEROKU_USER}" == "" ]; then
  echo "HEROKU_USER is not set in CircleCI env. set here https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/edit#env-vars"
  exit 1
fi

if [ "${HEROKU_API_TOKEN}" == "" ]; then
  echo "HEROKU_API_TOKEN is not set in CircleCI env. set here https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/edit#env-vars"
  exit 1
fi

if [ ! -f "${HOME}/.ssh/id_heroku.com.pub" ]; then
  echo "SSH is not set for Heroku in CircleCI. set here https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/edit#ssh"
  exit 1
fi

if [ "${STAGING_APP_PREFIX}" == "" ]; then
  echo "STAGING_APP_PREFIX is not set"
  exit 1
fi

if [ "${NUM_OF_STAGING_SERVERS}" == "" ]; then
  echo "NUM_OF_STAGING_SERVERS is not set"
  exit 1
fi

if [ "${CIRCLE_BRANCH}" == "" ]; then
  echo "CIRCLE_BRANCH is not set"
  exit 1
fi

function deploy() {
  cat > ${HOME}/.netrc <<EOF
machine api.heroku.com
  login ${HEROKU_USER}
  password ${HEROKU_API_TOKEN}
EOF
  chmod 600 ${HOME}/.netrc

  HEROKU_APP_NAME=`curl <%= ENV['DEPLOY_SUPPORT_TOOL_URL'] %>/apps --data "app=${STAGING_APP_PREFIX}&branch=${CIRCLE_BRANCH}&servers=${NUM_OF_STAGING_SERVERS}"`

  if [ "${HEROKU_APP_NAME}" == "" ]; then
    echo "failed to get a staging app name"
    exit 1
  fi

  check_missing_blob

  if [ "${HEROKU_ORGANIZATION}" != "" ]; then
    OPTION_HEROKU_ORGANIZATION="--org ${HEROKU_ORGANIZATION}"
  else
    OPTION_HEROKU_ORGANIZATION=""
  fi

  heroku git:remote --app ${HEROKU_APP_NAME} || heroku create ${HEROKU_APP_NAME} ${OPTION_HEROKU_ORGANIZATION}
  heroku config:add HEROKU_APP_NAME="${HEROKU_APP_NAME}" --app ${HEROKU_APP_NAME}
  heroku domains:add https://${HEROKU_APP_NAME}.${STAGING_APP_DOMAIN:-herokuapp.com} --app ${HEROKU_APP_NAME} || :

  prepare_for_staging_server

  # https://github.com/quipper/deploy-support-tools/pull/5#issuecomment-36588889
  [[ ! -s "$(git rev-parse --git-dir)/shallow" ]] || git fetch --unshallow
  GIT_TRACE=1 git push -f heroku ${CIRCLE_SHA1}:refs/heads/master

  notify_all
}

function check_missing_blob() {
  if [[ -n $(git fsck --no-progress | grep -F missing) ]]; then
    reclone
  fi
}

function reclone() {
  REMOTE=`git ls-remote --get-url origin`
  CUR=`pwd`
  cd ~/
  rm -rf ${CUR}
  git clone ${REMOTE}
  cd ${CUR}
  git reset --hard ${CIRCLE_SHA1} # this isn't strictly necessary
}

function notify() {
  # this is dummy method for a backward compatbility
  :
}

function notify_all() {
  HEROKU_APP_NAME=`curl <%= ENV['DEPLOY_SUPPORT_TOOL_URL'] %>/apps --data "app=${STAGING_APP_PREFIX}&branch=${CIRCLE_BRANCH}&servers=${NUM_OF_STAGING_SERVERS}"`
  URL="https://${HEROKU_APP_NAME}.${STAGING_APP_DOMAIN:-herokuapp.com}"

  if [ "${HEROKU_APP_NAME}" == "" ]; then
    echo "failed to get a staging app name"
    exit 1
  fi

  # notify hipchat
  if [ "${HIPCHAT_API_TOKEN}" != "" -a "${HIPCHAT_ROOM}" != "" ]; then
    curl <%= ENV['DEPLOY_SUPPORT_TOOL_URL'] %>/notifications/hipchat --data "room=${HIPCHAT_ROOM}&branch=${CIRCLE_BRANCH}&url=${URL}&token=${HIPCHAT_API_TOKEN}"
  fi

  # notify github via deployments api
  curl <%= ENV['DEPLOY_SUPPORT_TOOL_URL'] %>/deployments \
    -d "user=${CIRCLE_PROJECT_USERNAME}" \
    -d "repo=${CIRCLE_PROJECT_REPONAME}" \
    -d "ref=${CIRCLE_BRANCH}" \
    -d "environment=staging" \
    -d "state=success" \
    -d "target_url=${URL}"
}
